<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Burg Hosterwitz - Aufgaben</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;800&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container">
        <header class="header">
            <h1><%= user.role === 'kastellan' ? 'Aufgabenverwaltung' : 'Meine Aufgaben' %></h1>
        </header>

        <nav class="nav">
            <ul class="nav-list">
                <li><a href="/" class="nav-link">Zurück zum Dashboard</a></li>
                <% if (user.role === 'kastellan') { %>
                    <li><a href="#" class="nav-link" id="neueAufgabe">Neue Aufgabe</a></li>
                <% } %>
            </ul>
        </nav>

        <main class="medieval-panel">
            <div class="page-header">
                <h1>Aufgabenverwaltung der Burg</h1>
                <% if (user.role === 'kastellan') { %>
                    <button onclick="zeigeModal()" class="medieval-button">
                        <i class="fas fa-scroll"></i> Neue Aufgabe
                    </button>
                <% } %>
                <!-- Drucken Button -->
                <button onclick="druckeAufgaben()" class="medieval-button" style="margin-bottom: 20px;">
                    <i class="fas fa-scroll"></i> Aufgaben drucken
                </button>
            </div>

            <div class="filter-section medieval-panel">
                <div class="filter-group">
                    <label class="filter-label">Kategorie:</label>
                    <select id="kategorieFilter" class="medieval-select" onchange="filterAufgaben()">
                        <option value="">Alle Kategorien</option>
                        <option value="allgemein">Allgemein</option>
                        <option value="lift">Lift</option>
                        <option value="garten">Garten</option>
                        <option value="reinigung">Reinigung</option>
                        <option value="reparatur">Reparatur</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label class="filter-label">Status:</label>
                    <select id="statusFilter" class="medieval-select" onchange="filterAufgaben()">
                        <option value="">Alle Status</option>
                        <option value="neu">Neu</option>
                        <option value="begonnen">Begonnen</option>
                        <option value="abgeschlossen">Abgeschlossen</option>
                        <option value="verschoben">Verschoben</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label class="filter-label">Priorität:</label>
                    <select id="prioritaetFilter" class="medieval-select" onchange="filterAufgaben()">
                        <option value="">Alle Prioritäten</option>
                        <option value="hoch">Hoch</option>
                        <option value="mittel">Mittel</option>
                        <option value="niedrig">Niedrig</option>
                    </select>
                </div>
            </div>

            <div class="task-summary">
                <div class="summary-card">
                    <i class="fas fa-tasks"></i>
                    <span>Gesamt: <%= aufgaben.length %></span>
                </div>
                <div class="summary-card">
                    <i class="fas fa-exclamation-circle"></i>
                    <span>Offen: <%= aufgaben.filter(a => a.status === 'neu').length %></span>
                </div>
                <div class="summary-card">
                    <i class="fas fa-clock"></i>
                    <span>In Arbeit: <%= aufgaben.filter(a => a.status === 'begonnen').length %></span>
                </div>
                <div class="summary-card">
                    <i class="fas fa-check-circle"></i>
                    <span>Erledigt: <%= aufgaben.filter(a => a.status === 'abgeschlossen').length %></span>
                </div>
            </div>

            <% if (ueberfaelligeAufgaben && ueberfaelligeAufgaben.length > 0) { %>
                <div class="medieval-panel warning">
                    <h2>Überfällige Aufgaben</h2>
                    <ul class="task-list">
                        <% ueberfaelligeAufgaben.forEach(function(aufgabe) { %>
                            <li class="task-item task-priority-high">
                                <h3><%= aufgabe.titel %></h3>
                                <p><%= aufgabe.beschreibung %></p>
                                <p class="task-meta">
                                    Fällig bis: <%= new Date(aufgabe.terminBis).toLocaleDateString('de-DE') %>
                                </p>
                            </li>
                        <% }); %>
                    </ul>
                </div>
            <% } %>

            <ul class="task-list" id="aufgabenListe" data-current-date="<%= new Date().toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit', year: 'numeric' }) %>">
                <% aufgaben.forEach(function(aufgabe) { %>
                    <li class="task-item task-priority-<%= aufgabe.prioritaet %>" onclick="window.location.href='/api/aufgaben/<%= aufgabe._id %>'">
                        <div class="task-header">
                            <div class="task-title">
                                <i class="fas <%= 
                                    aufgabe.kategorie === 'lift' ? 'fa-dungeon' : 
                                    aufgabe.kategorie === 'garten' ? 'fa-leaf' :
                                    aufgabe.kategorie === 'reinigung' ? 'fa-broom' :
                                    aufgabe.kategorie === 'reparatur' ? 'fa-hammer' :
                                    'fa-scroll'
                                %>"></i>
                                <h3><%= aufgabe.titel %></h3>
                            </div>
                            <div class="task-badges">
                                <span class="badge kategorie-<%= aufgabe.kategorie %>">
                                    <%= aufgabe.kategorie === 'lift' ? 'Burgaufzug' :
                                       aufgabe.kategorie === 'garten' ? 'Burggarten' :
                                       aufgabe.kategorie === 'reinigung' ? 'Reinigung' :
                                       aufgabe.kategorie === 'reparatur' ? 'Reparatur' :
                                       'Allgemein'
                                    %>
                                </span>
                                <span class="badge status-<%= aufgabe.status %>">
                                    <%= aufgabe.status === 'neu' ? 'Neu' :
                                       aufgabe.status === 'begonnen' ? 'In Arbeit' :
                                       aufgabe.status === 'abgeschlossen' ? 'Erledigt' :
                                       'Verschoben'
                                    %>
                                </span>
                                <span class="badge prioritaet-<%= aufgabe.prioritaet %>">
                                    <i class="fas <%= 
                                        aufgabe.prioritaet === 'hoch' ? 'fa-exclamation-circle' :
                                        aufgabe.prioritaet === 'mittel' ? 'fa-dot-circle' :
                                        'fa-circle'
                                    %>"></i>
                                    <%= aufgabe.prioritaet === 'hoch' ? 'Dringend' :
                                       aufgabe.prioritaet === 'mittel' ? 'Normal' :
                                       'Niedrig'
                                    %>
                                </span>
                            </div>
                        </div>
                        <div class="task-body">
                            <div class="task-scroll">
                                <p class="task-description"><%= aufgabe.beschreibung %></p>
                            </div>
                            <div class="task-meta">
                                <span>
                                    <i class="fas fa-hourglass-half"></i>
                                    Fällig: <%= new Date(aufgabe.terminBis).toLocaleDateString('de-DE') %>
                                </span>
                                <span>
                                    <i class="fas fa-user-shield"></i>
                                    Zugewiesen an: <%= aufgabe.zugewiesenAn === 'hausmeister' ? 'Burgmeister' : 'Burgvogt' %>
                                </span>
                                <span>
                                    <i class="fas fa-feather-alt"></i>
                                    Erstellt: <%= new Date(aufgabe.erstelltAm).toLocaleDateString('de-DE') %>
                                </span>
                            </div>
                        </div>
                    </li>
                <% }); %>
            </ul>

            <style>
                :root {
                    --primary-color: #8B4513;
                    --background-color: #FFF8DC;
                    --text-color: #4A3728;
                    --border-color: #8B4513;
                    --accent-color: #DAA520;
                }

                .task-list {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }

                .task-item {
                    margin-bottom: 30px;
                    padding: 25px;
                    background: var(--background-color);
                    border: double 4px var(--border-color);
                    border-radius: 8px;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                    cursor: pointer;
                    transition: all 0.3s ease;
                    position: relative;
                    overflow: hidden;
                }

                .task-item::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: var(--accent-color);
                    opacity: 0;
                    transition: opacity 0.3s ease;
                    z-index: 0;
                }

                .task-item:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 12px rgba(139, 69, 19, 0.2);
                }

                .task-item:hover::before {
                    opacity: 0.05;
                }

                .task-header {
                    position: relative;
                    z-index: 1;
                }

                .task-title {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .task-title i {
                    font-size: 1.5em;
                    color: var(--primary-color);
                }

                .task-title h3 {
                    margin: 0;
                    font-family: 'Cinzel', serif;
                    color: var(--primary-color);
                    font-weight: 600;
                }

                .task-badges {
                    display: flex;
                    gap: 10px;
                    margin-top: 10px;
                }

                .badge {
                    padding: 4px 8px;
                    border-radius: 4px;
                    font-size: 0.9em;
                    font-family: 'Cinzel', serif;
                    display: flex;
                    align-items: center;
                    gap: 5px;
                }

                .badge i {
                    font-size: 0.9em;
                }

                .kategorie-lift { background: #E6D5AC; color: var(--primary-color); }
                .kategorie-garten { background: #C8E6C9; color: #2E7D32; }
                .kategorie-reinigung { background: #B3E5FC; color: #0277BD; }
                .kategorie-reparatur { background: #FFCCBC; color: #D84315; }

                .status-neu { background: #FFF3E0; color: #E65100; }
                .status-begonnen { background: #E3F2FD; color: #1565C0; }
                .status-abgeschlossen { background: #E8F5E9; color: #2E7D32; }
                .status-verschoben { background: #FCE4EC; color: #C2185B; }

                .prioritaet-hoch { background: #FFEBEE; color: #C62828; }
                .prioritaet-mittel { background: #FFF3E0; color: #EF6C00; }
                .prioritaet-niedrig { background: #F1F8E9; color: #558B2F; }

                .task-body {
                    position: relative;
                    z-index: 1;
                    margin-top: 15px;
                }

                .task-scroll {
                    max-height: 100px;
                    overflow-y: auto;
                    margin: 10px 0;
                    padding: 10px;
                    background: rgba(255, 255, 255, 0.5);
                    border-radius: 4px;
                }

                .task-description {
                    margin: 0;
                    line-height: 1.5;
                    color: var(--text-color);
                }

                .task-meta {
                    display: flex;
                    gap: 20px;
                    margin-top: 10px;
                    font-size: 0.9em;
                    color: var(--text-color);
                }

                .task-meta span {
                    display: flex;
                    align-items: center;
                    gap: 5px;
                }

                .task-meta i {
                    color: var(--primary-color);
                }

                /* Scrollbar Styling */
                .task-scroll::-webkit-scrollbar {
                    width: 8px;
                }

                .task-scroll::-webkit-scrollbar-track {
                    background: var(--background-color);
                    border-radius: 4px;
                }

                .task-scroll::-webkit-scrollbar-thumb {
                    background: var(--primary-color);
                    border-radius: 4px;
                }

                .task-scroll::-webkit-scrollbar-thumb:hover {
                    background: var(--accent-color);
                }
            </style>

            <style>
                /* Druck-Styles */
                @media print {
                    /* Grundlegendes Layout */
                    @page {
                        size: A4;
                        margin: 2.5cm 3cm;
                        background: var(--background-color);
                    }

                    @page :first {
                        margin-top: 3cm;
                    }

                    /* Verstecke alle Elemente außer der Aufgabenliste */
                    body * {
                        visibility: hidden;
                    }

                    .task-list, .task-list * {
                        visibility: visible;
                    }

                    .task-list {
                        position: absolute;
                        left: 0;
                        top: 0;
                        width: 100%;
                        padding: 0;
                    }

                    /* Mittelalterlicher Titel */
                    .task-list::before {
                        content: 'Aufgabenliste der Burg Hosterwitz';
                        display: block;
                        text-align: center;
                        font-family: 'Cinzel', serif;
                        font-size: 28px;
                        font-weight: 600;
                        color: var(--primary-color);
                        margin-bottom: 40px;
                        padding: 20px 0;
                        border-top: double 4px var(--primary-color);
                        border-bottom: double 4px var(--primary-color);
                        background: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0h20v20H0V0zm10 10l5-5h-3l-2 2-2-2H5l5 5z' fill='%238B4513' fill-opacity='0.1'/%3E%3C/svg%3E");
                    }

                    /* Aufgaben-Karten */
                    .task-item {
                        break-inside: avoid;
                        margin-bottom: 40px;
                        padding: 25px;
                        border: double 4px var(--border-color) !important;
                        background: var(--background-color) !important;
                        box-shadow: 0 2px 4px rgba(139, 69, 19, 0.1) !important;
                        position: relative;
                    }

                    /* Dekorative Ecken */
                    .task-item::before,
                    .task-item::after {
                        content: '';
                        position: absolute;
                        width: 20px;
                        height: 20px;
                        border: 2px solid var(--border-color);
                    }

                    .task-item::before {
                        top: 5px;
                        left: 5px;
                        border-right: none;
                        border-bottom: none;
                    }

                    .task-item::after {
                        bottom: 5px;
                        right: 5px;
                        border-left: none;
                        border-top: none;
                    }

                    /* Aufgaben-Titel */
                    .task-title {
                        margin-bottom: 15px !important;
                    }

                    .task-title h3 {
                        font-size: 20px !important;
                        color: var(--primary-color) !important;
                    }

                    /* Badges und Status */
                    .task-badges {
                        margin: 15px 0 !important;
                    }

                    .badge {
                        padding: 6px 12px !important;
                        border-radius: 4px !important;
                        font-size: 14px !important;
                        border: 1px solid currentColor !important;
                    }

                    /* Beschreibung */
                    .task-description {
                        margin: 20px 0 !important;
                        line-height: 1.6 !important;
                    }

                    /* Meta-Informationen */
                    .task-meta {
                        margin-top: 20px !important;
                        padding-top: 15px !important;
                        border-top: 1px solid var(--border-color) !important;
                    }

                    .task-meta span {
                        font-size: 14px !important;
                    }

                    /* Seitenzahlen */
                    @page {
                        @bottom-right {
                            content: counter(page);
                            font-family: 'Cinzel', serif;
                            font-size: 12px;
                            color: var(--primary-color);
                        }
                    }

                    /* Datum und Version */
                    .task-list::after {
                        content: 'Erstellt am ' attr(data-current-date);
                        display: block;
                        text-align: center;
                        font-family: 'Cinzel', serif;
                        font-size: 12px;
                        color: var(--text-color);
                        margin-top: 40px;
                        border-top: 1px solid var(--border-color);
                        padding-top: 20px;
                    }

                    /* Entferne unnötige Elemente */
                    .modal, .button-group, button, .footer, nav {
                        display: none !important;
                    }
                }
            </style>

        </main>

        <!-- Modal für neue Aufgabe -->
        <div id="aufgabeModal" class="modal">
            <div class="modal-content medieval-panel">
                <h2><i class="fas fa-scroll"></i> Neue Aufgabe erstellen</h2>
                <form action="/api/aufgaben" method="POST" id="neueAufgabeForm">
                    <div class="form-group">
                        <label for="titel">Titel der Aufgabe:</label>
                        <input type="text" id="titel" name="titel" class="medieval-input" required>
                    </div>

                    <div class="form-group">
                        <label for="beschreibung">Beschreibung:</label>
                        <textarea id="beschreibung" name="beschreibung" class="medieval-input" rows="4" required></textarea>
                    </div>

                    <div class="form-group">
                        <label for="kategorie">Kategorie:</label>
                        <select id="kategorie" name="kategorie" class="medieval-select" required>
                            <option value="">Wählt eine Kategorie...</option>
                            <option value="lift">Burgaufzug</option>
                            <option value="garten">Burggarten</option>
                            <option value="reinigung">Reinigung</option>
                            <option value="reparatur">Reparatur</option>
                            <option value="allgemein">Allgemein</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="prioritaet">Priorität:</label>
                        <select id="prioritaet" name="prioritaet" class="medieval-select" required>
                            <option value="">Wählt eine Priorität...</option>
                            <option value="hoch">Dringend</option>
                            <option value="mittel">Normal</option>
                            <option value="niedrig">Niedrig</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="terminBis">Fällig bis:</label>
                        <input type="date" id="terminBis" name="terminBis" class="medieval-input" required>
                    </div>

                    <div class="button-group">
                        <button type="button" class="medieval-button secondary" onclick="schliesseModal()">
                            <i class="fas fa-times"></i> Abbrechen
                        </button>
                        <button type="submit" class="medieval-button">
                            <i class="fas fa-feather-alt"></i> Aufgabe erstellen
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <style>
            .modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(74, 55, 40, 0.8);
                z-index: 1000;
            }

            .modal-content {
                position: relative;
                width: 90%;
                max-width: 600px;
                margin: 50px auto;
                padding: 30px;
                background: var(--background-color);
                border: double 4px var(--border-color);
                border-radius: 8px;
                box-shadow: 0 8px 16px rgba(139, 69, 19, 0.2);
            }

            .modal-content h2 {
                color: var(--primary-color);
                font-family: 'Cinzel', serif;
                font-weight: 600;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
                gap: 10px;
            }

            .form-group {
                margin-bottom: 20px;
            }

            .form-group label {
                display: block;
                margin-bottom: 8px;
                color: var(--primary-color);
                font-family: 'Cinzel', serif;
                font-weight: 600;
            }

            .medieval-input,
            .medieval-select {
                width: 100%;
                padding: 10px;
                border: 2px solid var(--border-color);
                border-radius: 4px;
                background: var(--background-color);
                color: var(--text-color);
                font-family: inherit;
            }

            .medieval-input:focus,
            .medieval-select:focus {
                outline: none;
                border-color: var(--accent-color);
                box-shadow: 0 0 0 2px rgba(218, 165, 32, 0.2);
            }

            .medieval-select {
                appearance: none;
                background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%238B4513' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
                background-repeat: no-repeat;
                background-position: right 10px center;
                background-size: 16px;
                padding-right: 40px;
            }

            .button-group {
                display: flex;
                gap: 15px;
                justify-content: flex-end;
                margin-top: 30px;
            }

            .medieval-button {
                padding: 10px 20px;
                border: 2px solid var(--border-color);
                border-radius: 4px;
                background: var(--primary-color);
                color: var(--background-color);
                font-family: 'Cinzel', serif;
                font-weight: 600;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: all 0.3s ease;
            }

            .medieval-button:hover {
                background: var(--accent-color);
                border-color: var(--accent-color);
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(139, 69, 19, 0.2);
            }

            .medieval-button.secondary {
                background: var(--background-color);
                color: var(--primary-color);
            }

            .medieval-button.secondary:hover {
                background: var(--primary-color);
                color: var(--background-color);
            }

            @media (max-width: 768px) {
                .modal-content {
                    margin: 20px;
                    padding: 20px;
                }

                .button-group {
                    flex-direction: column;
                }

                .medieval-button {
                    width: 100%;
                    justify-content: center;
                }
            }
        </style>

        <script>
            function zeigeModal() {
                document.getElementById('aufgabeModal').style.display = 'block';
                // Setze das Mindestdatum auf heute
                const heute = new Date().toISOString().split('T')[0];
                document.getElementById('terminBis').min = heute;
            }

            function schliesseModal() {
                document.getElementById('aufgabeModal').style.display = 'none';
            }

            // Schließe Modal bei Klick außerhalb
            window.onclick = function(event) {
                const modal = document.getElementById('aufgabeModal');
                if (event.target === modal) {
                    schliesseModal();
                }
            };

            // Formular-Validierung
            document.getElementById('neueAufgabeForm').addEventListener('submit', function(e) {
                const titel = document.getElementById('titel').value.trim();
                const beschreibung = document.getElementById('beschreibung').value.trim();
                const kategorie = document.getElementById('kategorie').value;
                const prioritaet = document.getElementById('prioritaet').value;
                const terminBis = document.getElementById('terminBis').value;

                if (!titel || !beschreibung || !kategorie || !prioritaet || !terminBis) {
                    e.preventDefault();
                    alert('Bitte füllt alle Felder der Schriftrolle aus.');
                    return;
                }

                const terminDate = new Date(terminBis);
                const heute = new Date();
                heute.setHours(0, 0, 0, 0);

                if (terminDate < heute) {
                    e.preventDefault();
                    alert('Das Fälligkeitsdatum muss in der Zukunft liegen.');
                    return;
                }
            });
        </script>

        <footer class="footer">
            <p>Version 25.1</p>
            <p>Programmiert von Martin Steindorfer</p>
        </footer>
    </div>

    <script>
        // Neue Aufgabe
        document.getElementById('neueAufgabe')?.addEventListener('click', () => {
            document.getElementById('aufgabeModal').style.display = 'block';
        });

        // Aufgabenformular
        document.getElementById('neueAufgabeForm')?.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const aufgabe = {
                titel: formData.get('titel'),
                beschreibung: formData.get('beschreibung'),
                kategorie: formData.get('kategorie'),
                prioritaet: formData.get('prioritaet'),
                terminBis: formData.get('terminBis')
            };
            
            try {
                const response = await fetch('/api/aufgaben', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(aufgabe)
                });
                
                if (response.ok) {
                    window.location.reload();
                } else {
                    const error = await response.json();
                    alert('Fehler: ' + error.message);
                }
            } catch (error) {
                alert('Ein Fehler ist aufgetreten');
            }
        });

        // Modal schließen
        function schliesseModal() {
            document.getElementById('aufgabeModal').style.display = 'none';
        }

        // Aufgaben filtern
        function filterAufgaben() {
            const kategorie = document.getElementById('kategorieFilter').value;
            const status = document.getElementById('statusFilter').value;
            const prioritaet = document.getElementById('prioritaetFilter').value;
            
            let url = '/api/aufgaben?';
            if (kategorie) url += `kategorie=${kategorie}&`;
            if (status) url += `status=${status}&`;
            if (prioritaet) url += `prioritaet=${prioritaet}`;
            
            window.location.href = url;
        }

        // Anmerkung hinzufügen
        function anmerkungHinzufuegen(aufgabeId) {
            document.getElementById('aufgabeId').value = aufgabeId;
            document.getElementById('anmerkungModal').style.display = 'block';
        }

        // Anmerkung Modal schließen
        function schliesseAnmerkungModal() {
            document.getElementById('anmerkungModal').style.display = 'none';
        }

        // Status aktualisieren
        async function statusAktualisieren(aufgabeId, neuerStatus) {
            try {
                const response = await fetch(`/api/aufgaben/${aufgabeId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: neuerStatus })
                });
                
                if (response.ok) {
                    window.location.reload();
                } else {
                    const error = await response.json();
                    alert('Fehler: ' + error.message);
                }
            } catch (error) {
                alert('Ein Fehler ist aufgetreten');
            }
        }

        function druckeAufgaben() {
            window.print();
        }
    </script>
</body>
</html>
